"""New_big_update

Revision ID: 0a457d6f6cf3
Revises: 0cddf1eb4f41
Create Date: 2025-10-16 13:37:56.502098

"""
from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0a457d6f6cf3'
down_revision: Union[str, None] = '0cddf1eb4f41'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('medicines',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('active_substance', sa.String(length=255), nullable=True),
    sa.Column('intake_method', sa.String(length=100), nullable=True),
    sa.Column('dosage', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('concentration', sa.Float(), nullable=True),
    sa.Column('volume', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_medicines_name', 'medicines', ['name'], unique=False)
    op.create_table('first_aid_kits',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('user_cor_id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_cor_id'], ['users.cor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_first_aid_kits_user_cor_id', 'first_aid_kits', ['user_cor_id'], unique=False)
    op.create_table('medicine_schedules',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('medicine_id', sa.String(length=36), nullable=False),
    sa.Column('user_cor_id', sa.String(length=36), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('duration_days', sa.Integer(), nullable=True),
    sa.Column('times_per_day', sa.Integer(), nullable=True),
    sa.Column('intake_times', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('interval_minutes', sa.Integer(), nullable=True),
    sa.Column('symptomatically', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['medicine_id'], ['medicines.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_cor_id'], ['users.cor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_medicine_schedules_medicine_id', 'medicine_schedules', ['medicine_id'], unique=False)
    op.create_index('idx_medicine_schedules_user_cor_id', 'medicine_schedules', ['user_cor_id'], unique=False)
    op.create_table('first_aid_kit_items',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('first_aid_kit_id', sa.String(length=36), nullable=False),
    sa.Column('medicine_id', sa.String(length=36), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['first_aid_kit_id'], ['first_aid_kits.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['medicine_id'], ['medicines.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_first_aid_kit_items_kit_id', 'first_aid_kit_items', ['first_aid_kit_id'], unique=False)
    op.create_index('idx_first_aid_kit_items_medicine_id', 'first_aid_kit_items', ['medicine_id'], unique=False)
    op.create_table('ophthalmological_prescriptions',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('patient_id', sa.String(length=36), nullable=False),
    sa.Column('od_sph', sa.Float(), nullable=True),
    sa.Column('od_cyl', sa.Float(), nullable=True),
    sa.Column('od_ax', sa.Float(), nullable=True),
    sa.Column('od_prism', sa.Float(), nullable=True),
    sa.Column('od_base', sa.String(length=10), nullable=True),
    sa.Column('od_add', sa.Float(), nullable=True),
    sa.Column('os_sph', sa.Float(), nullable=True),
    sa.Column('os_cyl', sa.Float(), nullable=True),
    sa.Column('os_ax', sa.Float(), nullable=True),
    sa.Column('os_prism', sa.Float(), nullable=True),
    sa.Column('os_base', sa.String(length=10), nullable=True),
    sa.Column('os_add', sa.Float(), nullable=True),
    sa.Column('glasses_purpose', sa.String(length=50), nullable=False),
    sa.Column('glasses_type', sa.String(length=50), nullable=False),
    sa.Column('issue_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('term_months', sa.Float(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('doctor_signature_id', sa.String(length=36), nullable=True),
    sa.Column('signed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['doctor_signature_id'], ['doctor_signatures.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ophthalmological_prescriptions_patient_id'), 'ophthalmological_prescriptions', ['patient_id'], unique=False)


    op.create_table(
        "energetic_objects",
        sa.Column("id", sa.String(length=36), primary_key=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False, unique=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("modbus_registers", sa.dialects.postgresql.JSONB(), nullable=True),
    )

    op.add_column("cerbo_measurements", sa.Column("energetic_object_id", sa.String(length=36), nullable=True))
    op.create_foreign_key(
        "fk_cerbo_measurements_energetic_object",
        "cerbo_measurements",
        "energetic_objects",
        ["energetic_object_id"],
        ["id"],
        ondelete="CASCADE",
    )

    op.add_column("energetic_schedule", sa.Column("energetic_object_id", sa.String(length=36), nullable=True))
    op.create_foreign_key(
        "fk_energetic_schedule_energetic_object",
        "energetic_schedule",
        "energetic_objects",
        ["energetic_object_id"],
        ["id"],
        ondelete="CASCADE",
    )

    conn = op.get_bind()
    cor_azk_id = str(uuid.uuid4())
    conn.execute(
        sa.text(
            "INSERT INTO energetic_objects (id, name, description, modbus_registers) "
            "VALUES (:id, :name, :desc, :regs)"
        ),
        {"id": cor_azk_id, "name": "COR-AZK", "desc": "Основной энергетический объект", "regs": None},
    )

    conn.execute(
        sa.text("UPDATE cerbo_measurements SET energetic_object_id = :id"),
        {"id": cor_azk_id},
    )
    conn.execute(
        sa.text("UPDATE energetic_schedule SET energetic_object_id = :id"),
        {"id": cor_azk_id},
    )

    op.alter_column("cerbo_measurements", "energetic_object_id", nullable=False)
    op.alter_column("energetic_schedule", "energetic_object_id", nullable=False)
    op.add_column('cor_id_auth_sessions', sa.Column('app_id', sa.String(length=250), nullable=True))
    op.add_column('cor_id_auth_sessions', sa.Column('device_id', sa.String(length=250), nullable=True))
    op.add_column('doctor_signature_sessions', sa.Column('ophthalmological_prescription_id', sa.String(length=36), nullable=True))
    op.alter_column('doctor_signature_sessions', 'diagnosis_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=True)
    


    op.add_column('user_sessions', sa.Column('app_id', sa.String(length=250), nullable=True))
    op.add_column('user_sessions', sa.Column('device_id', sa.String(length=250), nullable=True))
    op.drop_constraint('uq_user_device_session', 'user_sessions', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('uq_user_device_session', 'user_sessions', ['user_id', 'device_info'])
    op.drop_column('user_sessions', 'device_id')
    op.drop_column('user_sessions', 'app_id')
    op.drop_constraint(None, 'energetic_schedule', type_='foreignkey')
    op.drop_index(op.f('ix_energetic_schedule_energetic_object_id'), table_name='energetic_schedule')
    op.alter_column('energetic_schedule', 'charge_battery_value',
               existing_type=sa.INTEGER(),
               comment='заряжать батарею в этом режиме с каким то током',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'is_manual_mode',
               existing_type=sa.BOOLEAN(),
               comment='Флаг: находится ли инвертор в ручном режиме',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Флаг: активно ли это расписание',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'grid_feed_w',
               existing_type=sa.INTEGER(),
               comment='Параметр отдачи в сеть (Вт)',
               existing_comment='Отдача в сеть (Вт)',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'end_time',
               existing_type=postgresql.TIME(),
               comment='Время окончания работы режима (ЧЧ:ММ)',
               existing_comment='Время окончания работы режима',
               existing_nullable=False)
    op.alter_column('energetic_schedule', 'duration',
               existing_type=postgresql.INTERVAL(),
               comment='Продолжительность режима (например, 2 часа 30 минут)',
               existing_comment='Продолжительность режима',
               existing_nullable=False)
    op.drop_column('energetic_schedule', 'energetic_object_id')
    op.alter_column('doctor_signature_sessions', 'diagnosis_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=False)
    op.drop_column('doctor_signature_sessions', 'ophthalmological_prescription_id')
    op.drop_column('cor_id_auth_sessions', 'device_id')
    op.drop_column('cor_id_auth_sessions', 'app_id')
    op.drop_constraint(None, 'cerbo_measurements', type_='foreignkey')
    op.drop_index(op.f('ix_cerbo_measurements_energetic_object_id'), table_name='cerbo_measurements')
    op.alter_column('cerbo_measurements', 'measured_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата и время измерения, полученное с устройства',
               existing_comment='Дата и время измерения',
               existing_nullable=False)
    op.alter_column('cerbo_measurements', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата и время сохранения записи в БД',
               existing_nullable=False)
    op.drop_column('cerbo_measurements', 'energetic_object_id')
    op.drop_index(op.f('ix_ophthalmological_prescriptions_patient_id'), table_name='ophthalmological_prescriptions')
    op.drop_table('ophthalmological_prescriptions')
    op.drop_index('idx_first_aid_kit_items_medicine_id', table_name='first_aid_kit_items')
    op.drop_index('idx_first_aid_kit_items_kit_id', table_name='first_aid_kit_items')
    op.drop_table('first_aid_kit_items')
    op.drop_index('idx_medicine_schedules_user_cor_id', table_name='medicine_schedules')
    op.drop_index('idx_medicine_schedules_medicine_id', table_name='medicine_schedules')
    op.drop_table('medicine_schedules')
    op.drop_index('idx_first_aid_kits_user_cor_id', table_name='first_aid_kits')
    op.drop_table('first_aid_kits')
    op.drop_index('idx_medicines_name', table_name='medicines')
    op.drop_table('medicines')
    op.drop_table('energetic_objects')
    # ### end Alembic commands ###
