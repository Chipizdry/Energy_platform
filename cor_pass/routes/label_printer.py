from fastapi import APIRouter, Form
from PIL import Image, ImageDraw, ImageFont
from brother_ql.raster import BrotherQLRaster
from brother_ql.conversion import convert
import socket
import uuid
import time

router = APIRouter()

PRINTER_IP = "192.168.154.154"
PRINTER_MODEL = "QL-810W"
LABEL_TYPE = "62"
QUEUE_NAMES = ["lp", "LPT1", "PRINTER", "Brother", "label", "raw"] 



def create_label_image(text, max_width=696, max_height=300):
    font = ImageFont.load_default()
    temp_img = Image.new("RGB", (1, 1))
    temp_draw = ImageDraw.Draw(temp_img)
    bbox = temp_draw.textbbox((0, 0), "Ay", font=font)
    line_height = bbox[3] - bbox[1]

    lines = [text[i:i+40] for i in range(0, len(text), 40)]
    height = min(max_height, line_height * len(lines) + 20)

    img = Image.new("RGB", (max_width, height), color="white")
    draw = ImageDraw.Draw(img)
    y = 10
    for line in lines:
        draw.text((10, y), line, fill="black", font=font)
        y += line_height

    print(f"üñºÔ∏è –°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img.size}")
    return img


def try_lpr_print(data):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ LPR –ø—Ä–æ—Ç–æ–∫–æ–ª"""
    queues = ["raw", "lp", "LPT1", "PRINTER", "Brother", "label"]
    
    for queue in queues:
        try:
            print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ LPR –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å '{queue}'")
            
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(10)
                s.connect((PRINTER_IP, 515))
                
                # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                s.sendall(f"\x02{queue}\n".encode())
                response = s.recv(1)
                print(f"‚Üê –û—Ç–≤–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {response!r}")
                
                # 2. Control file
                cf = f"H{socket.gethostname()[:31]}\nPpython\nJlabel\nldfA{queue}\n"
                s.sendall(f"\x02{len(cf)} cfA{queue}\n".encode())
                s.recv(1)
                s.sendall(cf.encode() + b'\x00')
                s.recv(1)
                
                # 3. Data file
                s.sendall(f"\x03{len(data)} dfA{queue}\n".encode())
                s.recv(1)
                s.sendall(data + b'\x00')
                final_response = s.recv(1)
                
                if final_response == b'\x00':
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ '{queue}'")
                    return True
                
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
            continue
    
    return False

def try_system_lpr(data):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É lpr"""
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".prn") as tmp:
            tmp.write(data)
            tmp_path = tmp.name
        
        cmd = f"lpr -S {PRINTER_IP} -P raw -o raw {tmp_path}"
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–µ—á–∞—Ç–∏: {cmd}")
        
        result = subprocess.run(
            cmd.split(),
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ lpr")
            return True
            
        print(f"‚ùå –û—à–∏–±–∫–∞ lpr: {result.stderr}")
        return False
        
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–µ—á–∞—Ç–∏: {str(e)}")
        return False
    finally:
        import os
        if 'tmp_path' in locals():
            os.unlink(tmp_path)

def send_lpr_job(printer_ip, queue_name, data, timeout=10):  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
    s = None
    try:
        print(f"\n‚åõ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {printer_ip}:515 (–æ—á–µ—Ä–µ–¥—å: '{queue_name}')...")
        start_time = time.time()
        
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(timeout)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 8192)
        s.connect((printer_ip, 515))
        print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∑–∞ {(time.time()-start_time):.2f}—Å")

        def send_and_check(cmd, description=""):
            print(f"‚Üí [{description}] –û—Ç–ø—Ä–∞–≤–∫–∞: {cmd[:64]}...")
            s.sendall(cmd.encode('ascii') + b'\n')
            response = s.recv(1024)
            print(f"‚Üê –û—Ç–≤–µ—Ç: {response!r}")
            return response

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏
        print("\n=== 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ß–ï–†–ï–î–ò ===")
        response = send_and_check(f"\x02{queue_name}", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        if response != b'\x00':
            print(f"‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é: {response!r}")

        # 2. Control file
        print("\n=== 2. CONTROL FILE ===")
        control_file = (
            f"H{socket.gethostname()[:31]}\n"
            f"Ppython_script\n"
            f"Jlabel_print\n"
            f"ldfA{queue_name}\n"
            f"Nprintjob_{uuid.uuid4().hex[:8]}\n"
        )
        print(f"üìÑ Control file content:\n{control_file}")

        response = send_and_check(f"\x02{len(control_file)} cfA{queue_name}", "–†–∞–∑–º–µ—Ä control file")
        if response != b'\x00':
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è control file: {response!r}")

        print("‚åõ –û—Ç–ø—Ä–∞–≤–ª—è—é control file...")
        s.sendall(control_file.encode('ascii') + b'\x00')
        response = s.recv(1024)
        print(f"‚Üê –û—Ç–≤–µ—Ç –Ω–∞ control file: {response!r}")

        # 3. Data file
        print("\n=== 3. DATA FILE ===")
        response = send_and_check(f"\x03{len(data)} dfA{queue_name}", "–†–∞–∑–º–µ—Ä data file")
        if response != b'\x00':
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è data file: {response!r}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        print(f"‚åõ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(data)} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö...")
        chunk_size = 4096
        for i in range(0, len(data), chunk_size):
            s.sendall(data[i:i+chunk_size])
            if i % (chunk_size*10) == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 40KB
                print(f"‚Ü≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i/1024:.1f}KB –∏–∑ {len(data)/1024:.1f}KB")
        
        s.sendall(b'\x00')
        response = s.recv(1024)
        print(f"‚Üê –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {response!r}")

        if response == b'\x00':
            print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º")
            return True
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏: {response!r}")

    except socket.timeout:
        print("\n‚åõ –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏!")
        raise Exception(f"–¢–∞–π–º–∞—É—Ç ({timeout}—Å) –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º")
    except ConnectionRefusedError:
        print("\n‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        raise Exception("–ü—Ä–∏–Ω—Ç–µ—Ä –æ—Ç–∫–∞–∑–∞–ª –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise
    finally:
        if s:
            s.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")


@router.post("/print_code_label")
def print_label(content: str = Form(...)):
    print("\n" + "="*50)
    print(f"üÜï –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å: '{content[:32]}...'")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = create_label_image(content)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ QL-—Ñ–æ—Ä–º–∞—Ç
        qlr = BrotherQLRaster(PRINTER_MODEL)
        convert(
            qlr=qlr,
            images=[img],
            label=LABEL_TYPE,
            rotate="90",
            cut=True
        )
        print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(qlr.data)/1024:.1f}KB")

        # 1. –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ LPR
        if try_lpr_print(qlr.data):
            return {"status": "success", "method": "lpr"}
        
        # 2. –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π lpr
        if try_system_lpr(qlr.data):
            return {"status": "success", "method": "system_lpr"}
            
        raise Exception("–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–µ—á–∞—Ç–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return {"status": "error", "detail": str(e)}


        

def resize_image(img, max_width=696, max_height=300):
    w, h = img.size
    scale = min(max_width/w, max_height/h, 1.0)
    new_w, new_h = int(w*scale), int(h*scale)
    
    if (new_w, new_h) != (w, h):
        img = img.resize((new_w, new_h), Image.LANCZOS)
        print(f"üñºÔ∏è –ò–∑–º–µ–Ω–µ–Ω —Ä–∞–∑–º–µ—Ä: {w}x{h} ‚Üí {new_w}x{new_h}")
    
    return img


def check_printer_available(ip, port=515, timeout=3):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            s.connect((ip, port))
            return True
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return False